services:
  postgres:
    image: ${MATTERMOST_POSTGRES_IMAGE_TAG}
    volumes:
      - mattermost-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${MATTERMOST_DB_NAME}
      POSTGRES_USER: ${MATTERMOST_DB_USER}
      POSTGRES_PASSWORD: ${MATTERMOST_DB_PASSWORD}
    networks:
      - mattermost-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${MATTERMOST_DB_NAME}", "-U", "${MATTERMOST_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  mattermost:
    image: ${MATTERMOST_IMAGE_TAG}
    volumes:
      - mattermost-data:/mattermost/data
      - mattermost-config:/mattermost/config
      - mattermost-logs:/mattermost/logs
      - mattermost-plugins:/mattermost/plugins
      - mattermost-client-plugins:/mattermost/client/plugins
      - mattermost-bleve-indexes:/mattermost/bleve-indexes
    environment:
      TZ: ${MATTERMOST_TIMEZONE}
      MM_SQLSETTINGS_DRIVERNAME: ${MATTERMOST_DB_TYPE}
      MM_SQLSETTINGS_DATASOURCE: postgres://${MATTERMOST_DB_USER}:${MATTERMOST_DB_PASSWORD}@postgres:5432/${MATTERMOST_DB_NAME}?sslmode=disable&connect_timeout=10
      MM_BLEVESETTINGS_INDEXDIR: /mattermost/bleve-indexes
      DOMAIN: ${MATTERMOST_HOSTNAME}
      MM_SERVICESETTINGS_SITEURL: ${MATTERMOST_URL}
      MM_SERVICESETTINGS_FORWARD80TO443: 'false'
      MATTERMOST_CONTAINER_READONLY: 'false'
    networks:
      - mattermost-network
      - traefik-network
    security_opt:
      - no-new-privileges:true
    pids_limit: 200
    read_only: 'false'
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8065/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Match incoming requests on a specific hostname
      - "traefik.http.routers.mattermost.rule=Host(`${MATTERMOST_HOSTNAME}`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.mattermost.service=mattermost"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.mattermost.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.mattermost.loadbalancer.server.port=8065"
      # Enable TLS on this router
      - "traefik.http.routers.mattermost.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.mattermost.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.mattermost.loadbalancer.passhostheader=true"
      # Apply a compression middleware
      - "traefik.http.routers.mattermost.middlewares=compresstraefik"
      # Define settings for the compression middleware
      - "traefik.http.middlewares.compresstraefik.compress=true"
      # Assign the Zabbix UDP router to a named Traefik service
      - "traefik.udp.routers.mm-call-rtr.service=mm-call-svc"
      # Use the 'zabbix-udp' (custom) entry point
      - "traefik.udp.routers.mm-call-rtr.entrypoints=calls"
      # Define the internal container port for routing to the Zabbix UDP service
      - "traefik.udp.services.mm-call-svc.loadBalancer.server.port=8443"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      postgres-mattermost:
        condition: service_healthy

networks:
  mattermost-network:
    driver: bridge
  traefik-network:
    external: true

volumes:
  mattermost-data:
  mattermost-logs:
  mattermost-config:
  mattermost-plugins:
  mattermost-client-plugins:
  mattermost-postgres: